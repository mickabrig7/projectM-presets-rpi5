MILKDROP_PRESET_VERSION=201
PSVERSION=4
PSVERSION_WARP=4
PSVERSION_COMP=4
[preset00]
fRating=4.000
fGammaAdj=1.000
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=7
bAdditiveWaves=1
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=0.001
fWaveScale=1.157
fWaveSmoothing=0.630
fWaveParam=0.000
fModWaveAlphaStart=0.710
fModWaveAlphaEnd=1.300
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00500
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=0.650
wave_g=0.650
wave_b=0.650
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=12.000
nMotionVectorsY=9.000
mv_dx=0.000
mv_dy=0.000
mv_l=0.900
mv_r=1.000
mv_g=1.000
mv_b=1.000
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=51
wavecode_0_bSpectrum=1
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=1
wavecode_0_bAdditive=0
wavecode_0_scaling=1.32735
wavecode_0_smoothing=0.82000
wavecode_0_r=1.000
wavecode_0_g=1.000
wavecode_0_b=3.000
wavecode_0_a=1.000
wave_0_per_point1=x = rand(1001)*.001;
wave_0_per_point2=y = rand(1001)*.001;
wave_0_per_point3=
wave_0_per_point4=tm = time*.5 + sample*2;
wave_0_per_point5=
wave_0_per_point6=r = .5 + .5*sin(tm*1.132);
wave_0_per_point7=g = .5 + .5*sin(tm*1.121);
wave_0_per_point8=b = .5 + .5*sin(tm*1.187);
wavecode_1_enabled=0
wavecode_1_samples=512
wavecode_1_sep=51
wavecode_1_bSpectrum=1
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=0
wavecode_1_scaling=1.32735
wavecode_1_smoothing=0.82000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=3.000
wavecode_1_a=1.000
wave_1_per_point1=x = rand(1001)*.001;
wave_1_per_point2=y = rand(1001)*.001;
wave_1_per_point3=
wave_1_per_point4=tm = time*.5 + sample*2;
wave_1_per_point5=
wave_1_per_point6=r = .5 + .5*sin(tm*1.132);
wave_1_per_point7=g = .5 + .5*sin(tm*1.121);
wave_1_per_point8=b = .5 + .5*sin(tm*1.187);
wavecode_2_enabled=0
wavecode_2_samples=512
wavecode_2_sep=51
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=0
wavecode_2_scaling=1.32735
wavecode_2_smoothing=0.82000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=3.000
wavecode_2_a=1.000
wave_2_per_point1=x = rand(1001)*.001;
wave_2_per_point2=y = rand(1001)*.001;
wave_2_per_point3=
wave_2_per_point4=tm = time*.5 + sample*2;
wave_2_per_point5=
wave_2_per_point6=r = .5 + .5*sin(tm*1.132);
wave_2_per_point7=g = .5 + .5*sin(tm*1.121);
wave_2_per_point8=b = .5 + .5*sin(tm*1.187);
wavecode_3_enabled=0
wavecode_3_samples=16
wavecode_3_sep=51
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=1
wavecode_3_scaling=1.32735
wavecode_3_smoothing=0.82000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=3.000
wavecode_3_a=1.000
wave_3_per_point1=x = rand(1001)*.001;
wave_3_per_point2=y = rand(1001)*.001;
wave_3_per_point3=
wave_3_per_point4=tm = time*.5 + sample*2;
wave_3_per_point5=
wave_3_per_point6=r = .5 + .5*sin(tm*1.132);
wave_3_per_point7=g = .5 + .5*sin(tm*1.121);
wave_3_per_point8=b = .5 + .5*sin(tm*1.187);
shapecode_0_enabled=1
shapecode_0_sides=54
shapecode_0_additive=0
shapecode_0_thickOutline=0
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.000
shapecode_0_y=1.000
shapecode_0_rad=0.49138
shapecode_0_ang=1.57080
shapecode_0_tex_ang=3.14159
shapecode_0_tex_zoom=1.00000
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=1.000
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.000
shapecode_0_border_r=1.000
shapecode_0_border_g=1.000
shapecode_0_border_b=1.000
shapecode_0_border_a=0.000
shape_0_per_frame1=//x = .33;
shape_0_per_frame2=//y = .67;
shape_0_per_frame3=
shape_0_per_frame4=a_echo = (1.25 - .4*abs(q15) );
shape_0_per_frame5=//a2_echo = 1.2 - abs(.2*q15);
shape_0_per_frame6=
shape_0_per_frame7=a = if(a_echo > 0, if(a_echo > 1, 1, a_echo), 0);
shape_0_per_frame8=rad = sqrt(10*q14)*.5 + 100*q10;
shapecode_1_enabled=0
shapecode_1_sides=54
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=0
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.08195
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.00000
shapecode_1_tex_zoom=1.00000
shapecode_1_r=0.000
shapecode_1_g=1.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=0.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=0.000
shapecode_1_border_r=1.000
shapecode_1_border_g=1.000
shapecode_1_border_b=1.000
shapecode_1_border_a=0.000
shape_1_per_frame1=x=abs(q3 - .5);
shape_1_per_frame2=y=abs(1-q4 + .5);
shape_1_per_frame3=
shape_1_per_frame4=r = abs(q20);
shape_1_per_frame5=g = abs(q21);
shape_1_per_frame6=b = abs(q22);
shape_1_per_frame7=
shape_1_per_frame8=rad = .05*pow(mid, .85);
shapecode_2_enabled=0
shapecode_2_sides=54
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=0
shapecode_2_num_inst=1
shapecode_2_x=0.500
shapecode_2_y=0.500
shapecode_2_rad=0.08195
shapecode_2_ang=0.00000
shapecode_2_tex_ang=0.00000
shapecode_2_tex_zoom=1.00000
shapecode_2_r=0.000
shapecode_2_g=0.000
shapecode_2_b=0.000
shapecode_2_a=1.000
shapecode_2_r2=0.000
shapecode_2_g2=0.000
shapecode_2_b2=0.000
shapecode_2_a2=0.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shape_2_per_frame1=x=abs(q5 - .5);
shape_2_per_frame2=y=abs(1-q6 + .5);
shape_2_per_frame3=
shape_2_per_frame4=rad = .1*pow(bass, .85);
shapecode_3_enabled=0
shapecode_3_sides=54
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=0
shapecode_3_num_inst=1
shapecode_3_x=0.500
shapecode_3_y=0.500
shapecode_3_rad=0.08195
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=1.00000
shapecode_3_r=0.000
shapecode_3_g=0.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=0.000
shapecode_3_g2=0.000
shapecode_3_b2=0.000
shapecode_3_a2=0.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
shape_3_per_frame1=x=abs(q1 - .5);
shape_3_per_frame2=y=abs(1-q2 + .5);
shape_3_per_frame3=
shape_3_per_frame4=r = (q23);
shape_3_per_frame5=g = (q24);
shape_3_per_frame6=b = (q25);
shape_3_per_frame7=a = q19;
shape_3_per_frame8=
shape_3_per_frame9=rad = pow(bass, .85)*.05;
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .25; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=//q8 = 1; //#
per_frame_init_8=q16 = 1 + rand(2); //Tele ; rather fish eye
per_frame_init_9=//q16 = 1; //#
per_frame_init_10=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_11=q30 = 1; //logarithmic Z-Dist storage; unused
per_frame_init_12=q31 =128;
per_frame_init_13=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_14=cran0 = rand(1);
per_frame_init_15=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_16=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_17=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_18=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_19=
per_frame_init_20=//Find random starting point
per_frame_init_21=while (exec2(
per_frame_init_22=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_23=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_24=
per_frame_init_25=//  PosX = 3.3; PosY = 2; PosZ = -2; ran1 = 0; ran2 = 0; ran3 = 0; //#
per_frame_init_26=
per_frame_init_27=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_28=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_29=
per_frame_init_30=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_31=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_32=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_33=
per_frame_init_34=  //***********BOT*************
per_frame_init_35=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_init_36=  dist = 0.001;
per_frame_init_37=  while (exec2(
per_frame_init_38=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_init_39=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_init_40=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_init_41=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_init_42=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_init_43=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_init_44=    loop (7+1,
per_frame_init_45=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_init_46=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_init_47=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_init_48=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_init_49=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_init_50=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_init_51=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_init_52=    );
per_frame_init_53=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_init_54=    dist *= 1.05;
per_frame_init_55=  ,(dist < 0.6)*(len > 30)));
per_frame_init_56=,(dist < .06))); //end while
per_frame_init_57=
per_frame_init_58=smoothavg = 0;
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=dec_s = 1-.06*30/fps_;
per_frame_3=beat = (time >  t0+3); t0 = if(beat, time, t0);
per_frame_4=
per_frame_5=speed = max(0.0001, .08*dist_) * (1+2*avg) *(1-slow*.000025)*1.0/q7; //#
per_frame_6=ds = ds * dec_s + (1-dec_s)*speed*.25/fps_; 
per_frame_7=RotZ = if (RotZ==0,beat*(rand(100)<20*travel)*(rand(10)/10-.3),
per_frame_8=                   bnot(beat*(rand(100)<30))*RotZ);
per_frame_9=slow = if (bnot(slow), beat*(rand(1000*avg)<6), bnot(beat*(rand(100)<50)));
per_frame_10=look = if (bnot(look), beat*(rand(1000*speed)<12), bnot(beat*(rand(100)<50)));
per_frame_11=
per_frame_12=//Lamp View
per_frame_13=lx = if (beat,rand(150)/200+.15,lx);
per_frame_14=ly = if (beat,rand(150)/200+.15,ly);
per_frame_15=lampx = lampx * dec_s + (1-dec_s)*if (look,lx,0.5);
per_frame_16=lampy = lampy * dec_s + (1-dec_s)*if (look,ly,0.5);
per_frame_17=q1 = lampx; q2 = lampy;
per_frame_18=
per_frame_19=//Position 
per_frame_20=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_21=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_22=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_23=
per_frame_24=angchg = (.2-dist_)*(dist_ < .2)*2;
per_frame_25=travel = if (angchg > 0,0,travel+ds);
per_frame_26=v1 = v1 *dec_s + (1-dec_s)* RotZ * ds;
per_frame_27=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_;
per_frame_28=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_ + 2*v1);
per_frame_29=//v2 = .008;
per_frame_30=//push old RotMat
per_frame_31=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_32=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_33=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_34=
per_frame_35=n = 0; avg = 0;
per_frame_36=loop (8,
per_frame_37=  n = n+1;
per_frame_38=  //new Rot. Mat for infinitesimal angles
per_frame_39=  ran1 = rand(100)/100;
per_frame_40=  ran2 = rand(100)/200-.25;
per_frame_41=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.5707963268+ran2) * (n <= 4)*ran1;
per_frame_42=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_43=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_44=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_45=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_46=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_47=
per_frame_48=  //pop old RotMat
per_frame_49=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_50=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_51=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_52=
per_frame_53=  //Multiply new RotMat by old one
per_frame_54=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_55=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_56=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_57=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_58=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_59=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_60=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_61=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_62=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_63=
per_frame_64=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_65=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_66=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_67=
per_frame_68=  //***********BOT*************
per_frame_69=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_70=  dist = .25;
per_frame_71=  while (exec2(
per_frame_72=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_73=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_74=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_75=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_76=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_77=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_78=    loop (7+1,
per_frame_79=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_80=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_81=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_82=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_83=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_84=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_85=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_86=    );
per_frame_87=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_88=    dist *= 1.1;
per_frame_89=  ,(dist < 0.6)*(len > 30)));
per_frame_90=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_91=  avg = avg+abs(megabuf(n)/8);
per_frame_92=); //end loop 5
per_frame_93=
per_frame_94=n = 0; avg = 0; loop (8, n=n+1; avg = avg+abs(megabuf(n)/8));
per_frame_95=
per_frame_96=xslope = min(max(2/avg*(megabuf(1)-megabuf(3)),-3),3);
per_frame_97=yslope = min(max(2/avg*(megabuf(4)-megabuf(2)),-3),3);
per_frame_98=monitor = avg;
per_frame_99=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_100=
per_frame_101=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_102=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_103=//q15 = 4*avg - .333;
per_frame_104=//q15 = sign(q15)*pow(abs(q15), .9);
per_frame_105=
per_frame_106=smoothavg = .9*smoothavg + .1*avg;
per_frame_107=
per_frame_108=//q15 = smoothavg;
per_frame_109=q15 = avg;
per_frame_110=//q19 = .6 + .4*sin(time*.02+cran0*6); //brightness backgd
per_frame_111=start = start * .9;
per_frame_112=q11 = v1; q12 = v2; q13 = v3;
per_frame_113=//forward comp. of Rotation
per_frame_114=
per_frame_115=q3 = reg20;
per_frame_116=q9 = reg22;
per_frame_117=q17 = reg24
per_frame_118=q19 = 1*dist_;
per_frame_119=q29 = reg26;
per_frame_120=q32 = reg28;
per_frame_121=
per_frame_122=//monitor = ( 1.4 + q3);
per_frame_123=//monitor = q9;
per_frame_124=//monitor = pow(50000*q10, 1.1);
per_frame_125=//monitor = avg;
per_frame_126=//monitor = 1.15*q15;
per_frame_127=//monitor = 1 - 3*q17;
per_frame_128=//monitor = 2.5 + 2*q29;
per_frame_129=//monitor = -1.5 + 3*q32;
per_frame_130=//monitor = .7*(3.5 - (q22 + q25 + q28));
per_pixel_1= warp = 0.0; zoom = 1; dx = -q12/q16*(1+0*pow(x-.5,2)); dy = q13/q16*(1+0*pow(y-.5,2)); rot =q11;
warp_1=`sampler sampler_pw_noise_mq;
warp_2=`static float limit, dist, len, struc; static float2 uv0, uv1; static float3 uv2; static float4 box, box2;
warp_3=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_4=`
warp_5=`static const float3 CamPos = float3(q4,q5,q6);
warp_6=`static const float myzoom = q7,  res = 100, res2 = 200, tele = q16;
warp_7=`static const float change = q14, sustain =.9 - change, ds = q10, tic8 = 1.0/255, ffac = q17;
warp_8=`
warp_9=`float2 fstep2 (float2 xy) {return 1.0/res*round(res*xy);}
warp_10=`
warp_11=`float GetDist(float2 uvi) {float2 tmp; tmp = fstep2(tex2D (sampler_pc_main, uvi).gb); 
warp_12=`  return 1-(tmp.y + .65/res2*(tmp.x-1));}
warp_13=`
warp_14=`float2 PutDist(float x) {float tmp; tmp = fstep2(1-x);
warp_15=`  return (float2(res2*((1-x)-tmp)+.85,tmp));}
warp_16=`
warp_17=`float MinDist (float2 uvi) 
warp_18=`{
warp_19=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_20=`   pix = texsize.zw*(1.0+length(uvi-0.5)*1);   
warp_21=`   nb.x = GetDist(uvi+pix*float2(-1,-1));   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_22=`   nb.z = GetDist(uvi+pix*float2(1,1));     nb.w = GetDist(uvi+pix*float2(-1,1));         
warp_23=`   nb2.x = GetDist(uvi+pix*float2(0,-1));   nb2.y = GetDist(uvi+pix*float2(1,0));          
warp_24=`   nb2.z = GetDist(uvi+pix*float2(0,1));    nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_25=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_26=`   nb = min( nb, nb2 );
warp_27=`   nb.xy = min( nb.xy, nb.zw );
warp_28=`   tmp =min( nb.x, nb.y );
warp_29=`   return min(tmp, GetDist(uvi));
warp_30=`}
warp_31=`
warp_32=`float3 Get1 (float2 uvi, float uvn) {return lerp (GetPixel(uvi), GetBlur1(uvi), uvn);} 
warp_33=`
warp_34=`
warp_35=`
warp_36=`
warp_37=`//----------------------------------------------------------------------------------------------
warp_38=`float4 mbox (float3 uvi, float3 uvn) {float3 zz, zz0, zz1; float tmp;
warp_39=`  zz0 = uvi; zz = uvi * float3 (1,1,1); 
warp_40=`
warp_41=`     uvi = (tex3D(sampler_noisevol_hq, frac(-uvn/8) ) * -.5);
warp_42=`     uvn = reflect(uvn, uvi.zxy);
warp_43=`
warp_44=`     zz = (tex3D (sampler_noisevol_hq, frac(-zz0/8) ) * -.5);
warp_45=`     zz0 = reflect(zz0, zz.zxy);
warp_46=`
warp_47=`     zz1 = refract(tan(-uvi), tan(-zz0), cos(zz));   
warp_48=`
warp_49=`  for (int n = -7; n <= 0; n++) 
warp_50=`  {
warp_51=`
warp_52=`     uvi = (tex3D(sampler_noisevol_hq, frac(-uvn/8) ) * -.5);
warp_53=`     uvn = reflect(uvn, uvi.zxy);
warp_54=`
warp_55=`
warp_56=`     zz = (tex3D (sampler_noisevol_hq, frac(-zz0/8) ) * -.5);
warp_57=`     zz0 = reflect(zz0, zz.zxy);
warp_58=`
warp_59=`     zz1 = reflect(zz1, refract(tan(uvi), tan(zz0), cos(zz)));   
warp_60=`
warp_61=`  }
warp_62=`
warp_63=`return float4((zz)*limit, length( (zz1*limit) ));}
warp_64=`//----------------------------------------------------------------------------------------------
warp_65=`
warp_66=`shader_body {uv0 = uv_orig; float2 uv_echo = uv;
warp_67=`uv = (uv-.5)*(1-ds/(1-GetBlur1(uv).b)) + .5;
warp_68=`uv1 = (uv0-.5)*aspect.xy*tele;
warp_69=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+.001*rand_frame.yz)); 
warp_70=`   if (lum(noise) > (128/256) ) 
warp_71=`   {
warp_72=`       float3 noiseBiased = noise - float3(-0.0, 0.00, -0.00 );
warp_73=`      //Eo.S. combine the subtraction on noise to a single float3 
warp_74=`      //to ensure compiler does the subtraction in a single ALU
warp_75=`      dist = MinDist( (noiseBiased.yz) * -0.000 + uv ) +  .0015*float2(noiseBiased.g*(.5*(abs(q23) + abs(q24)) + .1), noiseBiased.b*(.5*(abs(q26) + abs(q27)) + .1 ));
warp_76=`   }    
warp_77=`   else {dist = .0015*noise.r*((abs(q20) + abs(q21)) + .1);}
warp_78=`
warp_79=`dist = (min(dist, GetDist(uv))  - ds*.1);
warp_80=`
warp_81=`limit = 10;
warp_82=`float tdist = (dist + pow(dist,3));
warp_83=`uv2 = ((frac(( mul(float3(uv1*(dist + pow(dist,3)),(dist + pow(dist,3))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0);
warp_84=`//uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_85=`box = mbox (((frac(( mul(float3(uv1*(dist + pow(dist,3)),(dist + pow(dist,3))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main, uv ));
warp_86=`box2 = mbox (((frac(( mul(float3(uv1*(dist + pow(dist,3)),(dist + pow(dist,3))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main,uv));
warp_87=`float4 box3 = frac(mbox (((frac(( mul(float3(uv1*(dist + pow(dist,3)),(dist + pow(dist,3))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main,uv))/limit);
warp_88=`len = (length((box)));
warp_89=`struc = length(mbox (((frac(( mul(float3(uv1*(dist + pow(dist,3)),(dist + pow(dist,3))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main, uv )))/limit;
warp_90=`
warp_91=`float3 ret1 = tex2D(sampler_pw_main, uv);
warp_92=`//float3 ret1 = .75*tex2D(sampler_pw_main, uv);
warp_93=`
warp_94=`if (( length( mbox (((frac(( mul(float3(uv1*(dist + pow(dist,4)),(dist + pow(dist,4))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main, uv )) ) < abs( limit*sin((.125*(9 + q21 + q22 + q23 + q24 + q25 + q26 + q27 + q28)*dist)) )  ) ){
warp_95=` ret1.r = (1-sustain)*(.2*struc*limit)+sustain*(Get1(uv, box3.w).r); ret1.gb=  PutDist(dist); ret1*=1.0;} 
warp_96=` else if ( lum(( box.w > sin( tex2D(sampler_pw_main, uv0))/(dist + .001) )) ) {
warp_97=`  ret1 = (tex2D(sampler_pw_main, uv)*(-.2*(float3( (clamp(box.x, -20, 100) + .01*box.x*bass), (clamp(box.y, -20, 100) + .01*box.y*mid), (clamp(box.z, -20, 100) + .01*box.z*treb) ) ) )*sustain 
warp_98=`                         + .045*(float3(log((box.r + .015*box.r*(1.15 + q3)*pow(( bass_att), 1))), 
warp_99=`                                         log((box.g + .015*box.g*(1.15 + q9)*pow(( mid_att), 1))), 
warp_100=`                                         log((box.b + .015*box.b*(1.15 + q17)*pow(( treb_att), 1)))))) ;} 
warp_101=` else { 
warp_102=`  ret1 *= frac(( abs(tan((( box.yzw + float3(.001*limit*box3.x*pow(bass_att, 1), .001*limit*box3.y*pow(mid_att, 1), .001*limit*box3.z*pow(treb_att, 1)) ) ))))); };
warp_103=`
warp_104=`if( ( length( mbox (((frac(( mul(float3(uv1*(dist + pow(dist,4)),(dist + pow(dist,4))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main, uv )) ) < abs( limit*sin((.125*(9 + q21 + q22 + q23 + q24 + q25 + q26 + q27 + q28)*dist)*dist)) ) && ( lum(box.w < sin( tex2D(sampler_pw_main, uv0))/(dist + .001) ) ) ) {
warp_105=` ret1 = .0005*(ret1%(float3( (((limit*box3.x ))), 
warp_106=`                           (((limit*box3.y ))), 
warp_107=`                           (((limit*box3.z ))) ) ) ) + .9995*ret1;};
warp_108=`
warp_109=`if( ( length( mbox (((frac(( mul(float3(uv1*(dist + pow(dist,4)),(dist + pow(dist,4))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main, uv )) ) < abs( limit*sin((.125*(9 + q21 + q22 + q23 + q24 + q25 + q26 + q27 + q28)*dist)*dist))  ) && ( lum(box.w > sin( tex2D(sampler_pw_main, uv0))/(dist + .001) )) ) {
warp_110=` ret1 = .0005*(ret1%(float3( ((limit*box3.x)), 
warp_111=`                          ((limit*box3.y)), 
warp_112=`                          ((limit*box3.z)) ) ) ) + .9995*ret1;};
warp_113=`
warp_114=`if( ( struc > dist ) && (box.w >= sin( lum(tex2D(sampler_pw_main, uv0))/(dist + .001) )) ) {
warp_115=` ret1 = .001*(ret1%(float3(atan(tan(limit*(box3.x ) )), 
warp_116=`                           atan(tan(limit*(box3.y ) )), 
warp_117=`                           atan(tan(limit*(box3.z ) )) ) ) ) + .999*ret1;};
warp_118=`
warp_119=`if( length( mbox (((frac(( mul(float3(uv1*(dist + pow(dist,4)),(dist + pow(dist,4))-.0)/myzoom,RotMat)+CamPos) / 8.0 + .5 ) - .5 )*8.0), tex2D (sampler_pw_main, uv )) ) == abs( limit*sin((.125*(9 + q21 + q22 + q23 + q24 + q25 + q26 + q27 + q28)*dist)*dist)) ) {
warp_120=` ret1 = .0001*(ret1%(float3( abs(sin(limit*(box3.x ) )), 
warp_121=`                           abs(sin(limit*(box3.y ) )), 
warp_122=`                           abs(sin(limit*(box3.z ) )) ) ) ) + .9999*ret1;};
warp_123=`
warp_124=`ret = ret1;
warp_125=`}
comp_1=`#define sat saturate
comp_2=`sampler sampler_pw_noise_lq;
comp_3=`sampler sampler_pw_noise_hq;
comp_4=`static const float2 pix = texsize.zw;
comp_5=`static float3 glow, tmp, lamp, dist, bdist, b2dist, dist_c, cloud, inten, z;
comp_6=`static float2 dz, uv1,uv2, uv3, uv4;
comp_7=`static const float3 CamPos = float3(q4,q5,q6);
comp_8=`static const float myzoom = q7;
comp_9=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
comp_10=`static const float3 col_struc =  float3(1,.7,.3) + .2*(rand_preset.xyz-.5);
comp_11=`
comp_12=`float3 GetBlurX (float2 uvi, float2 uvj) {return lerp (GetPixel(uvi), GetPixel(uvj), GetBlur1(uvj) );}
comp_13=`float3 GetBlurY (float2 uvi, float3 uvj) {return tex3D(sampler_noisevol_hq, lerp (tex2D(sampler_pw_main, frac(uvi)), uvj, sin(4*uvj)) );}
comp_14=`float3 GetDist(float2 uvi)   {return 1-tex2D(sampler_fw_main, uvi);}
comp_15=`float3 GetDistB(float2 uvi)  {return 1-GetBlur1(uvi);}
comp_16=`float3 GetDistB2(float2 uvi) {return 1-GetBlur2(uvi);}
comp_17=`
comp_18=`//float3 ColorTransformH(float3 col, float hueAdjust) // ApplyHue(float3 col, float hueAdjust)
comp_19=`//{
comp_20=`//    const float3 k = float3(0.57735, 0.57735, 0.57735);
comp_21=`//    half cosAngle = cos(hueAdjust*M_PI/36000);
comp_22=`//    return col * cosAngle + cross(k, col) * sin(hueAdjust) + k * dot(k, col) * (1.0 - cosAngle);
comp_23=`//}
comp_24=`
comp_25=`float3 ColorTransformH( float3 color, float hueAdjust )
comp_26=`{
comp_27=`
comp_28=`    hueAdjust = hueAdjust/180;
comp_29=`
comp_30=`    float3  kRGBToYPrime = float3 (0.299, 0.587, 0.114);
comp_31=`    float3  kRGBToI      = float3 (0.596, -0.275, -0.321);
comp_32=`    float3  kRGBToQ      = float3 (0.212, -0.523, 0.311);
comp_33=`
comp_34=`    float3  kYIQToR     = float3 (1.0, 0.956, 0.621);
comp_35=`    float3  kYIQToG     = float3 (1.0, -0.272, -0.647);
comp_36=`    float3  kYIQToB     = float3 (1.0, -1.107, 1.704);
comp_37=`
comp_38=`    float   YPrime  = dot(color, kRGBToYPrime);
comp_39=`    float   I       = dot(color, kRGBToI);
comp_40=`    float   Q       = dot(color, kRGBToQ);
comp_41=`    float   hue     = atan2(Q, I);
comp_42=`    float   chroma  = sqrt(I * I + Q * Q);
comp_43=`
comp_44=`    hue += hueAdjust;
comp_45=`
comp_46=`    Q = chroma * sin(hue);
comp_47=`    I = chroma * cos(hue);
comp_48=`
comp_49=`    float3    yIQ   = float3 (YPrime, I, Q);
comp_50=`
comp_51=`    return float3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );
comp_52=`
comp_53=`}
comp_54=`
comp_55=`float3 MinDistB (float2 uvi) { //##nicht ideal
comp_56=`//  tmp = GetBlurY(uvi, GetPixel(uvi));
comp_57=`  tmp = atan2( GetPixel(uvi), GetBlurY(uvi, GetPixel(uvi)) ) ;
comp_58=`  return (tmp);}
comp_59=`
comp_60=`float3 noise4 (float2 uvi) { float3 n1,n2,n3,n4,zv; zv = 0.008*time;
comp_61=`  n1 = (tex2D(sampler_pw_main, frac(uvi)));
comp_62=`  n2 = (tex2D(sampler_pw_main, frac(uvi*2+zv)));
comp_63=`  n3 = (tex2D(sampler_pw_main, frac(uvi*4+2*zv)));
comp_64=`  n4 = (tex2D(sampler_pw_main, frac(uvi*8+4*zv)));
comp_65=`  return n1 + n2/2 + n3/4 + n4/8;}
comp_66=`
comp_67=`float3 shadow (float2 uvi, float3 dark) {int n; float3 dx = 1; float2 uvc=uvi;
comp_68=`  n = 1;
comp_69=`  while ( (n <= 9)) 
comp_70=`     {dx = dx + n*(GetPixel(uvi)); 
comp_71=`      uvc = uvc + sqrt(dx); 
comp_72=`      dark = 1.1*(dark - .25*GetPixel(uvc)) * (GetBlurY(uvc, GetPixel(uvi))-GetBlurX(uvi, GetPixel(uvc)) <= 2*lum(dx*GetPixel(uvc))); 
comp_73=`      n++;
comp_74=`     ;}
comp_75=`  return dark/9;
comp_76=`}
comp_77=`
comp_78=`shader_body {
comp_79=`
comp_80=`float tele = q16;
comp_81=`float2 uv0 = uv;
comp_82=`uv = 2*float2(abs(uv.x-.5)+.5,abs(uv.y-.5)+.5);
comp_83=`
comp_84=`uv1= frac((uv0-.5)*aspect.xy);
comp_85=`
comp_86=`dist = MinDistB(uv);
comp_87=`bdist = lerp(shadow(uv, pow(50000*q10, 1.1)*GetPixel(frac(uv))), GetBlurX(uv, uv0), dist);
comp_88=`float3 struc0 = GetBlurX(uv,1*dist);
comp_89=`float3 struc = struc0 * (1-dist)*dist;
comp_90=`
comp_91=`tmp = 0;
comp_92=`for (int k = 1; k <= 1; k++) {
comp_93=`  uv2 = (uv1*(1-.1*tmp))*.2-float2(q11,q12)*.2;
comp_94=`  tmp = saturate(lum(tex2D (sampler_noise_hq,uv2 +.03*noise4(uv2*4))-.4));}
comp_95=`tmp = saturate(pow(tmp,1.2) * sign(tmp));
comp_96=`
comp_97=`float3 ret1 = struc0;//tmp;//float3 (1,1, 1) * sat(bdist*2-1.5)*tmp*4;;
comp_98=`
comp_99=`//ret1 = 0;
comp_100=`int anz = 5; float t_rel = q13*6;
comp_101=`for (int n=1;n<=anz;n++) {
comp_102=`    float m =  n-int(t_rel);
comp_103=`
comp_104=`    z = 1-frac(1.0*n*bdist/anz-1.0*frac(-t_rel*dist)/anz); 
comp_105=`
comp_106=`    inten =  (1-z)*z*4;
comp_107=`    tmp = 0;
comp_108=`    for (int k = 1; k <= 1; k++) {
comp_109=`      uv2 = z*(uv1*(1-tmp))/4-float2(q11,q12)/6;
comp_110=`      tmp = ((tex2D (sampler_pw_main,frac(uv2 + GetBlurX(uv2*8, uv1*8 )))-z*.5-.1) + MinDistB(uv));}
comp_111=`    tmp = (tmp) *inten*(bdist*1)*q1*.5;
comp_112=`      
comp_113=`    ret1 = (ret1 + struc*q1*float3(1,1,1))*sat(1-tmp) + tmp;
comp_114=`}
comp_115=`
comp_116=`
comp_117=`float3 ret6 = tex2D(sampler_pw_main, frac(uv)) ;
comp_118=`float3 ret2 = GetBlurY(uv, GetPixel(uv0));
comp_119=`float3 ret0 = shadow(uv, -10*bdist);
comp_120=`
comp_121=`const float2 hor = float2 (1,0);
comp_122=`const float2 ver = float2 (0,1);
comp_123=`
comp_124=`float dx = lum((ColorTransformH(GetPixel (uv+hor),360*(1+ q27)) - ColorTransformH(GetPixel (uv-hor),360*(1+ q26))));
comp_125=`float dy = lum((ColorTransformH(GetPixel (uv+ver),360*(1+ q24)) - ColorTransformH(GetPixel (uv-ver),360*(1+ q23))));    
comp_126=`float2 dz = float2 (dx,dy);
comp_127=`
comp_128=`//dz = frac(dz += lum( (tex2D(sampler_pw_main, uv0/(.5/rad + tele )*((3 + q23 + q24 ))+q31)-.5).xz + tex2D(sampler_pw_main, uv) ));
comp_129=`dz = frac(dz += frac(lum(tex2D(sampler_pw_main, (uv1*(.5/rad + tele )*((q23 + q24 )*.5)+q31)-.5))));
comp_130=`dz = frac(dz += (tex2D(sampler_pw_main, uv0/(.5/rad + tele )*((3 + q23 + q24 ))+q31)-.5).xz);
comp_131=`
comp_132=`uv1 = uv;
comp_133=`
comp_134=`uv1 = frac(uv1 - dz);
comp_135=`float3 dots = abs(.5*atan2(GetPixel(uv0), GetPixel(uv)) );
comp_136=`
comp_137=`float3 ret7 = dots;
comp_138=`
comp_139=`//int multiple = 1440;
comp_140=`
comp_141=`ret = .75*atan(.75*abs(
comp_142=`                  lerp((((2*(2*q3)*ColorTransformH( .5*atan2(GetPixel(uv), MinDistB(uv0)) , 1440*(q20)) ) )), 
comp_143=`                   ((  (2*q32)*ColorTransformH( ret1, 1440*(q26)) )), 
comp_144=`                   asin(((( 4*sqrt(1000*q14)*ColorTransformH( .25*lerp(shadow(uv, 2.5*(4 + q26 + q27 + q28)*GetPixel(frac(uv))), GetBlurX(uv, uv0), MinDistB(uv0) ) ,               1440*(q23))) )) ) )  +
comp_145=`                  lerp( asin(log(( pow(1.5 + 1.3*q29, 1.3)*ColorTransformH(tex3D(sampler_noisevol_hq, float3(lum(GetPixel(uv)), lum(GetPixel(uv0)), lum(GetPixel( uv0)) ) ),                 1440*(q21) ) + .1 )) - float3(.0, 0, .0)), // GetBlurY(uv, GetPixel(uv0))
comp_146=`                   asin(log(( shadow(uv, pow(4 + q20 + q21 + q22, 1.333)*ColorTransformH(MinDistB(uv0),               1440*(q27)) ) + .15 ))), 
comp_147=`                   ( (    (2*( 3*q9 )* ColorTransformH(.5*atan2(GetPixel(uv0), GetPixel(uv)),               1440*(q24)) ))  ) ) +
comp_148=`                  lerp(asin((( 4*((-1.2 + 3.5*q15)*ColorTransformH( .25*shadow(uv, -10*GetBlurX(uv, uv0)), 1440*(q22))) ))), 
comp_149=`                    asin((( 1.5*(q23 + q24 + q25)*ColorTransformH(ret6 * float3(1, 1, 1), 1440*(q28) )) )), 
comp_150=`                    ((( (3*q17)*ColorTransformH(tex3D(sampler_noisevol_hq, float3(uv.x, uv0.y, lum(dz))), 1440*(q25)) ) )) )
comp_151=`                    )) ;
comp_152=`
comp_153=`//ret = abs(                  lerp( asin(log(( pow(1.3 + q29, 1.25)*ColorTransformH(GetBlurY(uv, GetPixel(uv0)),                 1440*(q21) ) + .1 )) - float3(.0, 0, .0)), 
comp_154=`//                   asin(log(( shadow(uv, pow(4 + q20 + q21 + q22, 1.25)*ColorTransformH(MinDistB(uv0),               1440*(q27)) ) + .15 ))), 
comp_155=`//                   ( (    (( 3*q9 )* ColorTransformH(atan2(GetPixel(uv0), GetPixel(uv)),               1440*(q24)) ))  ) ) );
comp_156=`
comp_157=`//ret = abs(                   lerp(asin((( 4*((-1.5 + 5*q15)*ColorTransformH( .25*shadow(uv, -10*GetBlurX(uv, uv0)), 1440*(q22))) ))), 
comp_158=`//                    asin((( 7*(q23 + q24 + q25)*ColorTransformH(tex3D(sampler_noisevol_hq, float3(lum(GetPixel(uv)), lum(GetPixel(uv0)), lum(GetPixel(uv0)))), 1440*(q28) )) )), 
comp_159=`//                    ((( (3*q17)*ColorTransformH(tex3D(sampler_noisevol_hq, float3(uv.x, uv0.y, lum(dz))), 1440*(q25)) ) )))  );
comp_160=`
comp_161=`}
comp_162=`//Lots of code written by martin and En D (and some by me, Fumbling_Foo)
comp_163=`//Thanks To God for helping me :D !
